<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RocketLib</name>
    </assembly>
    <members>
        <member name="P:RocketLib.Collections.Heroes.Playables">
            <summary>
            All playable heroes. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.CampaignBro">
            <summary>
            All heroes playables in campaign. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.Expendabros">
            <summary>
            Expendabros heroes array. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.Unused">
            <summary>
            Unused Heroes. Some are playble some aren't. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.ForeverUpdate">
            <summary>
            Heroes from the Forever Update in unlock order. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.OriginalUnlockIntervals">
            <summary>
            The original unlock intervals dictionary. (read only)
            </summary>
        </member>
        <member name="P:RocketLib.Collections.Heroes.HeroSaveInterval">
            <summary>
            The original array of hero save number interval. (read only)
            </summary>
        </member>
        <member name="M:RocketLib.Extensions.GrenadeExtensions.CompareToDefaultGrenade(Grenade)">
            <summary>
            Prints the values that have been changed in this object from the default values for the Grenade class.
            </summary>
            <param name="grenade">Object to compare to the default grenade.</param>
        </member>
        <member name="M:RocketLib.Extensions.ProjectileExtensions.CompareToDefaultProjectile(Projectile)">
            <summary>
            Prints the values that have been changed in this object from the default values for the Projectile class.
            </summary>
            <param name="projectile">Object to compare to the default projectile.</param>
        </member>
        <member name="T:RocketLib.Loggers.ScreenLogger">
            <summary>
            On screen logger.
            </summary>
        </member>
        <member name="P:RocketLib.Loggers.ScreenLogger.Instance">
            <summary>
            Instance of ScreenLogger
            </summary>
        </member>
        <member name="P:RocketLib.Loggers.ScreenLogger.IsLoaded">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLib.Loggers.ScreenLogger.FullLogList">
            <summary>
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Clear">
            <summary>
            Clear the log on screen.
            </summary>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Log(System.Object,RLogType)">
            <summary>
            Add log to the screen.
            </summary>
            <param name="str">Log Message</param>
            <param name="type">RLogType</param>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.Log(System.Object,System.String)">
            <summary>
            Add log to the screen. (BroforceMod edition)
            </summary>
            <param name="str">Log Message</param>
            <param name="prefix">Prefix of the log</param>
        </member>
        <member name="M:RocketLib.Loggers.ScreenLogger.WhichColor(System.String)">
            <summary>
            </summary>
            <param name="LogMsg"></param>
            <returns></returns>
        </member>
        <member name="P:RocketLib.RocketMain.Loaded">
            <summary>
            Is RocketLib loaded
            </summary>
        </member>
        <member name="P:RocketLib.RocketMain.settings">
            <summary>
            RocketLib settings
            </summary>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawLine(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug line
            </summary>
            <param name="ID">Name of line, use the same name to update an existing line</param>
            <param name="start">Start position</param>
            <param name="end">End position</param>
            <param name="color">Color of line</param>
            <param name="width">Width of line</param>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawRectangle(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug rectangle
            </summary>
            <param name="ID">Name of rectangle, use the same name to update an existing rectangle</param>
            <param name="corner1">One of the corners</param>
            <param name="corner2">The opposite corner of the first one provided</param>
            <param name="color">Color of rectangle</param>
            <param name="width">Width of rectangle</param>
        </member>
        <member name="M:RocketLib.Utils.DrawDebug.DrawCrosshair(System.String,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single)">
            <summary>
            Draw a debug crosshair
            </summary>
            <param name="ID">Name of crosshair, use the same name to update an existing crosshair</param>
            <param name="center">Center of the crosshair</param>
            <param name="length">Length of each line</param>
            <param name="color">Color of crosshair</param>
            <param name="width">Width of crosshair</param>
        </member>
        <member name="T:RocketLib.Utils.ObjectComparer">
            <summary>
            Provides functionality to compare two objects and find all differences between them
            </summary>
        </member>
        <member name="F:RocketLib.Utils.ObjectComparer.MAX_DEPTH">
            <summary>
            Maximum recursion depth to prevent stack overflow from circular references
            </summary>
        </member>
        <member name="T:RocketLib.Utils.ObjectComparer.ObjectPair">
            <summary>
            Internal class used to track pairs of objects that have already been compared
            to prevent infinite recursion on circular references
            </summary>
        </member>
        <member name="F:RocketLib.Utils.ObjectComparer.SkipProperties">
            <summary>
            Properties that should be skipped during comparison to avoid reflection metadata
            and circular references common in Unity objects
            </summary>
        </member>
        <member name="F:RocketLib.Utils.ObjectComparer.SimpleTypeNames">
            <summary>
            Type names that should be treated as simple types and compared directly
            without recursing into their properties
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.Compare``1(``0,``0)">
            <summary>
            Compares two objects of the same type and returns a list of all differences found
            </summary>
            <typeparam name="T">The type of objects being compared</typeparam>
            <param name="obj1">The first object to compare</param>
            <param name="obj2">The second object to compare</param>
            <returns>A list of all differences found between the two objects</returns>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.CompareInternal``1(``0,``0,System.String,System.Int32,System.Collections.Generic.HashSet{RocketLib.Utils.ObjectComparer.ObjectPair})">
            <summary>
            Internal recursive comparison method that tracks depth and visited pairs
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.CompareObjectsNonGeneric(System.Object,System.Object,System.String,System.Int32,System.Collections.Generic.HashSet{RocketLib.Utils.ObjectComparer.ObjectPair})">
            <summary>
            Compares two objects when their type is not known at compile time
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsSimpleType(System.Type)">
            <summary>
            Determines if a type should be treated as simple (compared directly without recursion)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is simple, false otherwise</returns>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.GenerateMatchingStatement(System.String,System.String)">
            <summary>
            Generates a single assignment statement for a property path and value.
            Uses 'this.' prefix as the code is meant to be placed inside the class.
            </summary>
            <param name="propertyPath">The property path (e.g. "sprite.width")</param>
            <param name="value">The value to assign</param>
            <returns>A C# assignment statement, or empty string if unable to generate</returns>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsVectorValue(System.String)">
            <summary>
            Determines if a value represents a vector type
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.GenerateVectorAssignment(System.String,System.String)">
            <summary>
            Generates an assignment statement for vector types using 'this.' prefix
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsNumericOrBool(System.String)">
            <summary>
            Determines if a value is numeric or boolean
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsBool(System.String)">
            <summary>
            Determines if a value is boolean
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsNumeric(System.String)">
            <summary>
            Determines if a value is numeric
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ObjectComparer.IsObjectType(System.String)">
            <summary>
            Determines if a value represents an object type that should be skipped
            </summary>
        </member>
        <member name="T:RocketLib.Utils.Difference">
            <summary>
            Represents a single difference between two objects
            </summary>
        </member>
        <member name="P:RocketLib.Utils.Difference.PropertyPath">
            <summary>
            The path to the property or field that differs (e.g. "Person.Address.Street")
            </summary>
        </member>
        <member name="P:RocketLib.Utils.Difference.Value1">
            <summary>
            The string representation of the value from the first object
            </summary>
        </member>
        <member name="P:RocketLib.Utils.Difference.Value2">
            <summary>
            The string representation of the value from the second object
            </summary>
        </member>
        <member name="M:RocketLib.Utils.Difference.ToString">
            <summary>
            Returns a formatted string representation of the difference
            </summary>
        </member>
        <member name="T:RocketLib.Utils.UnitType">
            <summary>
            Enumeration of all unit types in Broforce
            </summary>
        </member>
        <member name="T:RocketLib.Utils.UnitTypes">
            <summary>
            Utility class for working with Broforce unit types, providing methods for identification, spawning, and querying unit properties.
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.AllTestVanDammeAnimNames">
            <summary>
            Array containing the display names of all TestVanDammeAnim-derived units.
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.AllUnitNames">
            <summary>
            Array containing the display names of all units in the game, including non-TestVanDammeAnim types.
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.NormalUnits">
            <summary>
            Normal enemy units (regular mooks, bruisers, etc.)
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.AlienUnits">
            <summary>
            Alien enemy units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.HellUnits">
            <summary>
            Hell enemy units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.BossUnits">
            <summary>
            Boss units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.WormUnits">
            <summary>
            Worm enemy units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.VehicleEnemies">
            <summary>
            Vehicle enemy units (tanks, trucks, etc.)
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.FriendlyUnits">
            <summary>
            Civilian and animal units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.OtherUnits">
            <summary>
            Other units
            </summary>
        </member>
        <member name="F:RocketLib.Utils.UnitTypes.AllUnits">
            <summary>
            All unit types in the game (excluding None)
            </summary>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetUnitType(TestVanDammeAnim)">
            <summary>
            Gets the UnitType of a TestVanDammeAnim character based on its MookType and specific class type.
            </summary>
            <param name="character">The TestVanDammeAnim character to identify.</param>
            <returns>The UnitType of the character.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetUnitType(Unit)">
            <summary>
            Gets the UnitType of any Unit, including both TestVanDammeAnim and non-TestVanDammeAnim types.
            </summary>
            <param name="unit">The Unit to identify.</param>
            <returns>The UnitType of the unit.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetTestVanDammeAnimPrefab(RocketLib.Utils.UnitType,System.Int32,System.Boolean)">
            <summary>
            Gets the TestVanDammeAnim prefab for the specified unit type.
            </summary>
            <param name="type">The unit type to get the prefab for.</param>
            <param name="villagerNum">For villagers, specifies which villager variant to return. -1 for random.</param>
            <param name="startDead">For undead mooks, whether to get the lying-down variant.</param>
            <returns>The TestVanDammeAnim prefab, or null if the type doesn't have one.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetUnitPrefab(RocketLib.Utils.UnitType,System.Int32,System.Boolean)">
            <summary>
            Gets the Unit prefab for any unit type, including both TestVanDammeAnim and non-TestVanDammeAnim types.
            </summary>
            <param name="type">The unit type to get the prefab for.</param>
            <param name="villagerNum">For villagers, specifies which villager variant to return. -1 for random.</param>
            <param name="startDead">For undead mooks, whether to get the lying-down variant.</param>
            <returns>The Unit prefab for spawning.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.ToDisplayString(RocketLib.Utils.UnitType)">
            <summary>
            Converts a UnitType to its human-readable string representation.
            </summary>
            <param name="type">The UnitType to convert.</param>
            <returns>The display name of the unit type.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetDisplayName(RocketLib.Utils.UnitType)">
            <summary>
            Gets the display name for a UnitType. This is a static method alternative to the extension method.
            </summary>
            <param name="type">The UnitType to get the display name for.</param>
            <returns>The display name of the unit type.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.ToUnitType(System.String)">
            <summary>
            Converts a string representation to its corresponding UnitType.
            </summary>
            <param name="type">The string name of the unit type.</param>
            <returns>The corresponding UnitType, or UnitType.None if not found.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.HasSpecial(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type has a special ability (first special slot).
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit has a special ability.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.HasSpecial2(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type has a second special ability.
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit has a second special ability.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.HasSpecial3(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type has a third special ability.
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit has a third special ability.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.CanDance(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type can perform a dance/taunt animation.
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit can dance.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.IsSuicideUnit(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type is a suicide unit.
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit is a suicide type.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.IsTestVanDammeAnimType(RocketLib.Utils.UnitType)">
            <summary>
            Determines if the unit type derives from the TestVanDammeAnim base class.
            </summary>
            <param name="type">The unit type to check.</param>
            <returns>True if the unit type derives from TestVanDammeAnim, false for vehicles, bosses, and worms.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetSpriteWidth(RocketLib.Utils.UnitType)">
            <summary>
            Gets the sprite width for the specified unit type.
            </summary>
            <param name="type">The unit type to get sprite width for.</param>
            <returns>The width of the unit's sprite in pixels.</returns>
        </member>
        <member name="M:RocketLib.Utils.UnitTypes.GetSpriteHeight(RocketLib.Utils.UnitType)">
            <summary>
            Gets the sprite height for the specified unit type.
            </summary>
            <param name="type">The unit type to get sprite height for.</param>
            <returns>The height of the unit's sprite in pixels.</returns>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Particle_AlphaBlend">
            <summary>
            Particles/Alpha Blended
            </summary>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Unlit_DepthCutout">
            <summary>
            Unlit/Depth Cutout With ColouredImage
            </summary>
        </member>
        <member name="P:RocketLib.Utils.ResourcesController.Particle">
            <summary>
            Particle/Additive
            </summary>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetMaterial(System.String,System.String)">
            <summary>
            Creates a Material using the shader Unlit_DepthCutout.
            Loads Material from cache if created previously.
            </summary>
            <param name="path">Path to an image or asset</param>
            /// <param name="fileName">Name of an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetMaterial(System.String)">
            <summary>
            Creates a Material using the shader Unlit_DepthCutout.
            Loads Material from cache if created previously.
            </summary>
            <param name="filePath">Path to an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.Byte[])">
            <summary>
            Creates a Material from an array of bytes using the shader Unlit_DepthCutout.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="imageBytes">Byte array to load image from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.String,UnityEngine.Shader)">
            <summary>
            Creates a Material using the specified image and shader.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <param name="shader">Shader to use</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateMaterial(System.String,UnityEngine.Material)">
            <summary>
            Creates a Material using the specified image and Material as a source.
            The Material is not cached, use GetMaterial if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <param name="source">Source Material to copy</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetTexture(System.String,System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            Loads Texture2D from cache if created previously.
            </summary>
            <param name="path">Path to an image or asset</param>
            /// <param name="fileName">Name of an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetTexture(System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            Loads Texture2D from cache if created previously.
            </summary>
            <param name="filePath">Path to an image or asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateTexture(System.String)">
            <summary>
            Creates a Texture2D from an image or asset file.
            The Texture2D is not cached, use GetTexture if caching is desired.
            </summary>
            <param name="filePath">Path to an image file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateTexture(System.Byte[])">
            <summary>
            Creates a Texture2D from a byte array.
            The Texture2D is not cached, use GetTexture if caching is desired.
            </summary>
            <param name="imageBytes">Byte array to load image from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetAudioClip(System.String,System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            Loads AudioClip from cache if created previously. Note that the same cached AudioClip can't be played several times simultaneously.
            </summary>
            <param name="path">Path to an audio file</param>
            <param name="fileName">Name of an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.GetAudioClip(System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            Loads AudioClip from cache if created previously. Note that the same cached AudioClip can't be played several times simultaneously.
            </summary>
            <param name="filePath">Path to an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateAudioClip(System.String,System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            The AudioClip is not cached, use GetAudioClip is caching is desired.
            </summary>
            <param name="path">Path to an audio file</param>
            <param name="fileName">Name of an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.CreateAudioClip(System.String)">
            <summary>
            Creates an AudioClip from an audio file.
            The AudioClip is not cached, use GetAudioClip is caching is desired.
            </summary>
            <param name="filePath">Path to an audio file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.ExtractResource(System.String)">
            <summary>
            Creates a byte array from a file.
            </summary>
            <param name="filename">Name of a file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.ResourcesController.LoadAssetSync``1(System.String)">
            <summary>
            Loads an object from an asset file.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Name of the asset file</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromMat(System.String,UnityEngine.Material)">
            <summary>
            Create a Texture from a material. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image path</param>
            <param name="material">Original Material</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromSpriteSM(System.String,SpriteSM)">
            <summary>
            Create a Texture from SpriteSM. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image Path</param>
            <param name="sprite">Original Sprite</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromMeshRenderer(System.String,UnityEngine.MeshRenderer)">
            <summary>
            Create a Texture from a MeshRenderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="meshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromRenderer(System.String,UnityEngine.Renderer)">
            <summary>
            Create a Texture from a Renderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="Renderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.Utils.CreateTexture.FromTexture(System.String,UnityEngine.Texture)">
            <summary>
            Create a Texture from an existing one. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="texture--"></param>
            <returns></returns>
        </member>
        <member name="T:RocketLib.Utils.SettingsRecovery">
            <summary>
            Provides recovery functionality for corrupted or incompatible XML settings files.
            When UnityModManager fails to deserialize a settings file due to XML errors or schema changes,
            this class attempts to recover as much data as possible from the invalid XML.
            </summary>
            <example>
            <code>
            // Settings.cs
            public int SettingsVersion = 0;
            
            public override void Save(UnityModManager.ModEntry modEntry)
            {
                if (SettingsVersion == 0) SettingsVersion = 1;
                Save(this, modEntry);
            }
            
            // Main.cs Load method
            settings = Settings.Load&lt;Settings&gt;(modEntry);
            if (settings.SettingsVersion == 0)
            {
                var settingsPath = Path.Combine(modEntry.Path, "Settings.xml");
                settings = SettingsRecovery.TryRecoverSettings&lt;Settings&gt;(settingsPath, settings);
            }
            if (settings.SettingsVersion == 0) settings.SettingsVersion = 1;
            </code>
            </example>
        </member>
        <member name="M:RocketLib.Utils.SettingsRecovery.TryRecoverSettings``1(System.String,``0)">
            <summary>
            Attempts to recover settings from a potentially corrupted XML file.
            </summary>
            <typeparam name="T">The settings class type, must inherit from UnityModManager.ModSettings</typeparam>
            <param name="xmlPath">Path to the XML settings file to recover from</param>
            <param name="defaultSettings">Optional default settings object to use as base, or null to create new</param>
            <returns>A settings object with recovered values where possible, defaults for unrecoverable fields</returns>
            <remarks>
            Recovery process:
            - Simple types (bool, int, float, string, enum) are recovered individually
            - Arrays and Lists are recovered element by element, skipping invalid items
            - Complex objects are recovered if their XML structure is valid
            - Fields with XML attribute mappings ([XmlArray], [XmlElement]) are properly handled
            - Invalid or missing fields are left at their default values
            </remarks>
        </member>
        <member name="M:RocketLib.ComponentExtensions.RemoveComponent``1(UnityEngine.Component)">
            <summary>
            Remove the component of type T from the current Component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="self"></param>
        </member>
        <member name="T:RocketLib.SerializableKeyValuePair`2">
            <summary>
            Generic key-value pair for XML serialization of dictionaries
            </summary>
            <typeparam name="TKey">The type of the dictionary key</typeparam>
            <typeparam name="TValue">The type of the dictionary value</typeparam>
        </member>
        <member name="T:RocketLib.GameObjectExtensions">
            <summary>
            Extensions for the GameObject class.
            </summary>
        </member>
        <member name="M:RocketLib.GameObjectExtensions.RemoveComponent``1(UnityEngine.GameObject)">
            <summary>
            Remove the component of type T from the current GameObject.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="self"></param>
        </member>
        <member name="M:RocketLib.GameObjectExtensions.SetParentAndResetScale(UnityEngine.Transform,UnityEngine.Transform,System.Nullable{UnityEngine.Vector3})">
            <summary>
            Sets the parent and resets localScale to Vector3.one to prevent inheriting parent's scale.
            </summary>
        </member>
        <member name="M:RocketLib.StringExtensions.Dye(System.String,UnityEngine.Color)">
            <summary>
            Surround string with xml "color" tag
            </summary>
        </member>
        <member name="M:RocketLib.StringExtensions.Dye(System.String,System.String)">
            <summary>
            Surround string with xml "color" tag
            </summary>
        </member>
        <member name="T:RocketLib.GamePassword">
            <summary>
            Add password to the game
            </summary>
        </member>
        <member name="M:RocketLib.GamePassword.#ctor(System.String,System.Action)">
            <summary>
            Create the game password.
            </summary>
            <param name="_password"></param>
            <param name="_action"></param>
        </member>
        <member name="M:RocketLib.GamePassword.ToString">
            <summary>
            Return password
            </summary>
            <returns></returns>
        </member>
        <member name="M:RocketLib.KeyBinding.HasKeyAssigned">
            <summary>
            Checks whether a keybinding has been assigned.
            </summary>
            <returns>True if a keybinding is assigned, otherwise false.</returns>
        </member>
        <member name="M:RocketLib.KeyBinding.IsDown">
            <summary>
            Gets state of key
            </summary>
            <returns>True if key is pressed down</returns>
        </member>
        <member name="M:RocketLib.KeyBinding.PressedDown">
            <summary>
            Checks if key was just pressed
            </summary>
            <returns>True if key was pressed this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBinding.Released">
            <summary>
            Checks if key was just released
            </summary>
            <returns>True if key was released this frame</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.LoadKeyBinding(System.String,System.String)">
            <summary>
            Finds a keybind for the mod for the specified key if it exists, otherwise it creates a new one.
            </summary>
            <param name="modName">Name of mod</param>
            <param name="keyName">Name of key</param>
            <returns>Previously created or newly created keybinding</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.AddKeyBinding(RocketLib.KeyBindingForPlayers,System.String)">
            <summary>
            Adds a keybind to the dictionary of all keybinds for a specific mod.
            </summary>
            <param name="keybinding">Keybind to add</param>
            <param name="modId">Name of the mod</param>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.TryGetKeyBinding(System.String,System.String,RocketLib.KeyBindingForPlayers@)">
            <summary>
            Tries to get a specific keybind for a specific mod.
            </summary>
            <param name="modName"></param>
            <param name="keyName"></param>
            <param name="keybinding"></param>
            <returns>True if it was found, false otherise</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.TryGetAllKeyBindingsForMod(System.String,System.Collections.Generic.Dictionary{System.String,RocketLib.KeyBindingForPlayers}@)">
            <summary>
            Returns a dictionary containing all the keybinds for the specified mod, if there are any.
            </summary>
            <param name="modName">Mod to find keybinds for</param>
            <param name="modKeyBindings">Dictionary containing all the keybinds for this mod</param>
            <returns>True if it was found, false otherise</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ClearKeyBindingsForMod(System.String)">
            <summary>
            Clears all keybinds for the specified mod
            </summary>
            <param name="modName">Name of mod</param>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ConvertToJson">
            <summary>
            Converts the dictionary containing the keybinds for all mods into JSON
            </summary>
            <returns>JSON string of all keybinds</returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.ReadFromJson(System.String)">
            <summary>
            Reads from a JSON string and creates a dictionary storing all keybindings for all mods.
            </summary>
            <param name="json">JSON string to read from</param>
            <returns></returns>
        </member>
        <member name="M:RocketLib.AllModKeyBindings.RecreateDictionary">
            <summary>
            Creates a new Dictionary for keybindings for all mods. This will delete any currently stored keybindings for all mods.
            </summary>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.#ctor(System.String,System.String)">
            <summary>
            Create a Keybinding for all 4 players
            </summary>
            /// <param name="modId">Name of the mod that is adding the keybinding</param>
            <param name="name">Name of the key</param>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.HasAnyKeysAssigned">
            <summary>
            Checks whether a keybinding has been assigned to any player
            </summary>
            <returns>True if a keybinding has been assigned to any player</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.HasKeysAssigned(System.Int32)">
            <summary>
            Checks whether a keybinding has been assigned for the specified player
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if the player has a keybinding set</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.IsDown(System.Int32)">
            <summary>
            Gets state of key
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key is currently down</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.PressedDown(System.Int32)">
            <summary>
            Checks if key was just pressed
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key was pressed this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.Released(System.Int32)">
            <summary>
            Checks if key was just released
            </summary>
            <param name="player">Player to check keybinding for</param>
            <returns>True if key was released this frame</returns>
        </member>
        <member name="M:RocketLib.KeyBindingForPlayers.OnGUI(System.Int32@,System.Boolean,System.Boolean,System.String@,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Displays keybinding options for one or more players
            </summary>
            <param name="player">Player that had their keybinding clicked</param>
            <param name="displayToolTip">Display tooltip below keybinding</param>
            <param name="includeToolTip">Include tooltip with the keybinding. Doesn't display the tooltip unless displayToolTip is also set to true</param>
            <param name="previousToolTip">Previous tooltip that was displayed, used to ignore previous tooltips</param>
            <param name="playerToDisplay">Player to display if onlyOnePlayer is set to true</param>
            <param name="onlyOnePlayer">Only display one player's keybinding options</param>
            <param name="separateKeyName">Separate the keyname from the button, if set to false it will be included within the button</param>
            <param name="fixedWidth">Controls whether the button should be a fixed width or not</param>
            <returns>True if one of the buttons was pressed and a key is being assigned</returns>
        </member>
        <member name="P:RocketLib.RGUI.Unexpanded">
            <summary> Do not expand the GUILayout width and height </summary>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.String[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.String[],System.Int32,System.Single)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.Object[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.ArrowList(System.Object[],System.Int32,System.Single)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="selected">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib.RGUI.Tab(System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="Strings"></param>
            <param name="Number"></param>
            <param name="Space"></param>
            <param name="TabWidth"></param>
            <returns></returns>
        </member>
        <member name="T:RocketLib.Menus.Vanilla.BaseCustomMenu">
            <summary>
            Abstract base class for all custom menus in RocketLib.
            Provides core functionality for menu creation, item management, and scene persistence.
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.BaseCustomMenu.MenuTitle">
            <summary>
            Display title for this menu
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.BaseCustomMenu.InstanceId">
            <summary>
            Instance identifier (set by MenuRegistry for caching)
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.BaseCustomMenu.ItemSpacing">
            <summary>
            Vertical spacing between menu items
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.BaseCustomMenu.ItemSpacingCompressed">
            <summary>
            Compressed vertical spacing (used when moveHighlight is false)
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.BaseCustomMenu.InitialVerticalOffset">
            <summary>
            Initial vertical offset for menu items
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.Initialize(Menu)">
            <summary>
            Initialize the menu with references from parent menu
            </summary>
            <param name="parent">The parent menu to copy references from</param>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.SetupMenuItems">
            <summary>
            Set up the menu items for this menu.
            Override this to define your menu's items.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.Awake">
            <summary>
            Unity Awake - set up the menu when GameObject becomes active
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.OnMenuOpened">
            <summary>
            Called when the menu is opened
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.OnMenuClosed">
            <summary>
            Called when the menu is closed
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.FindParentMenuInScene">
            <summary>
            Find the parent menu in the current scene
            </summary>
            <returns>The parent menu if found, null otherwise</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.AddMenuItem(System.String,System.String,System.Boolean)">
            <summary>
            Add a menu item to this menu
            </summary>
            <param name="displayText">Display text for the item</param>
            <param name="methodName">Method to invoke when selected</param>
            <param name="isToggle">Whether this item accepts left/right input</param>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.UpdateMenuItemVisuals">
            <summary>
            Update the visual representation of menu items
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.Update">
            <summary>
            Override Update to handle Escape key like OptionsMenu does
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.BaseCustomMenu.OnDestroy">
            <summary>
            Clean up when menu is destroyed
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Vanilla.SimpleSubmenu">
            <summary>
            A simple submenu that can be quickly created with just a list of items.
            Provides an easy way to create submenus without needing to create a custom class.
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Vanilla.SimpleSubmenu.MenuTitle">
            <summary>
            Gets the unique identifier for this menu
            </summary>
            <summary>
            Gets the display title for this menu
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.SimpleSubmenu.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.Action})">
            <summary>
            Static factory method to create a SimpleSubmenu with the specified items.
            </summary>
            <param name="name">Menu display name</param>
            <param name="items">Dictionary of item names to action callbacks. Use null for automatic back handling.</param>
            <returns>A configured SimpleSubmenu instance</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.SimpleSubmenu.Awake">
            <summary>
            Called when the component is added - initialize from pending data
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.SimpleSubmenu.SetupMenuItems">
            <summary>
            Set up the menu items for this menu.
            Converts the dictionary items to MenuBarItems.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.SimpleSubmenu.GetParentFontSize">
            <summary>
            Get the appropriate font size based on parent menu
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.SimpleSubmenu.RunInput">
            <summary>
            Override RunInput to handle actions directly without SendMessage
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Vanilla.MenuItemBuilder">
            <summary>
            Fluent builder for creating configured menu items.
            Provides a clean API for constructing MenuBarItem instances with all their properties.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithText(System.String)">
            <summary>
            Set the display text for this menu item.
            </summary>
            <param name="text">The text to display</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithAction(System.Action)">
            <summary>
            Set the action to execute when selected.
            </summary>
            <param name="action">The action to execute</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithMethodName(System.String)">
            <summary>
            Set a specific method name to invoke (for compatibility with existing menu items).
            </summary>
            <param name="methodName">The method name to invoke</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithSize(System.Single)">
            <summary>
            Set the text size (default is 6f).
            </summary>
            <param name="size">The text size</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithColor(UnityEngine.Color)">
            <summary>
            Set the text color.
            </summary>
            <param name="color">The text color</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithToggle(System.Action{System.Boolean},System.Func{System.Boolean})">
            <summary>
            Set a toggle action for left/right input.
            </summary>
            <param name="toggleAction">Action to execute when toggled</param>
            <param name="getCurrentState">Function to get current state</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.WithData(System.Object)">
            <summary>
            Set custom data to store with this item.
            </summary>
            <param name="data">Custom data object</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.Build">
            <summary>
            Build the configured menu item.
            </summary>
            <returns>The constructed MenuBarItem</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.BuildForSimpleSubmenu">
            <summary>
            Build a MenuBarItem specifically for SimpleSubmenu use.
            </summary>
            <returns>The constructed MenuBarItem</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.GetAction">
            <summary>
            Get the action associated with this builder.
            </summary>
            <returns>The action or null</returns>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.GetDynamicAction(System.String)">
            <summary>
            Get a stored dynamic action by method name.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.GetToggleAction(System.String)">
            <summary>
            Get a stored toggle action by method name.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.GetCustomData(System.String)">
            <summary>
            Get stored custom data by method name.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.MenuItemBuilder.ClearDynamicStorage">
            <summary>
            Clear all stored dynamic actions and data.
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Vanilla.ModOptionsMenu">
            <summary>
            Centralized mod options menu that dynamically shows items registered with ModOptions target
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.Initialize">
            <summary>
            Register the ModOptionsMenu in main menu and pause menu
            Called by RocketLib initialization
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.HasRegisteredModOptions">
            <summary>
            Check if any mods have registered options
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.SetupMenuItems">
            <summary>
            Dynamically builds menu items from registered mods
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.GetParentFontSize">
            <summary>
            Get the appropriate font size based on parent menu
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.RegisterMenuAction(System.String,System.Action)">
            <summary>
            Register an action for a menu item
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Vanilla.ModOptionsMenu.OnDestroy">
            <summary>
            Clean up when menu is destroyed
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Core.MenuRegistry">
            <summary>
            Central registry for managing menu registrations and menu item injections
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.RegisterAction(System.String,System.Action{Menu},RocketLib.Menus.Core.TargetMenu,RocketLib.Menus.Core.PositionMode,System.String,System.Int32,System.Func{Menu,System.Boolean})">
            <summary>
            Register a custom action (no menu, just code to run)
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.RegisterMenu``1(System.String,RocketLib.Menus.Core.TargetMenu,RocketLib.Menus.Core.PositionMode,System.String,System.Int32,System.Func{Menu,System.Boolean})">
            <summary>
            Register any menu type by class
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.RegisterMenu(System.Object,System.String,RocketLib.Menus.Core.TargetMenu,RocketLib.Menus.Core.PositionMode,System.String,System.Int32,System.Func{Menu,System.Boolean})">
            <summary>
            Register any menu type by instance
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.GetMenusForTarget(RocketLib.Menus.Core.TargetMenu)">
            <summary>
            Get all registrations for a specific target menu
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.InjectMenuItems(Menu)">
            <summary>
            Inject registered items into a game menu
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.DetermineInsertPosition(System.Collections.Generic.List{MenuBarItem},RocketLib.Menus.Core.MenuRegistration)">
            <summary>
            Determine the insertion position for a menu item based on positioning settings
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.GetTargetMenuType(Menu)">
            <summary>
            Get the target menu type for a menu instance
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.RegisterMenuAction(Menu,System.String,RocketLib.Menus.Core.MenuRegistration)">
            <summary>
            Register an action to be invoked when a menu item is selected
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.InvokeMenuAction(Menu,System.String)">
            <summary>
            Invoke a registered menu action
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistry.ClearAll">
            <summary>
            Clear all registrations (useful for mod unload)
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Core.TargetMenu">
            <summary>
            Target menus where menu items can be injected
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Core.MenuKind">
            <summary>
            Type of menu being registered
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Core.PositionMode">
            <summary>
            Positioning modes for menu items
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Core.MenuRegistration">
            <summary>
            Unified menu registration that handles both menu instance and menu item
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Core.MenuRegistration.Open(Menu)">
            <summary>
            Opens the menu or executes the action
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Tests.TransitionTestMenu">
            <summary>
            Test menu for demonstrating transition animations
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Utilities.GridMenuHighlight">
            <summary>
            Custom highlight for grid menus that supports dynamic width and height
            Uses 9-slice approach with 8 sprites (4 corners + 4 sides)
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Utilities.HighlightFactory">
            <summary>
            Factory class for creating menu highlight objects without dependencies
            </summary>
            <summary>
            Factory class for creating menu highlight objects without dependencies
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Utilities.HighlightFactory.CreateHighlight(UnityEngine.Transform,System.Int32)">
            <summary>
            Creates a complete highlight object with lens flare and box components
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Utilities.HighlightFactory.CreateGridHighlight(UnityEngine.Transform,System.Int32,System.Single)">
            <summary>
            Creates a grid highlight with dynamic width and height support
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.LayoutContainer">
            <summary>
            Abstract base class for all layout containers.
            Each layout type is implemented as a separate subclass.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.LayoutContainer.ArrangeChildren">
            <summary>
            Abstract method for subclasses to implement their specific layout algorithm
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.LayoutContainer.GetCameraBounds(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the current camera screen bounds. Used for overflow detection.
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.LayoutContainer.Create(RocketLib.Menus.Layout.LayoutMode)">
            <summary>
            Factory method to create containers by type
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.SizeMode">
            <summary>
            Specifies how a LayoutElement's size should be calculated
            </summary>
        </member>
        <member name="F:RocketLib.Menus.Layout.SizeMode.Fixed">
            <summary>
            Width/Height value is exact size in world units
            </summary>
        </member>
        <member name="F:RocketLib.Menus.Layout.SizeMode.Percentage">
            <summary>
            Width/Height value is percentage (0.0 to 1.0) of parent container
            </summary>
        </member>
        <member name="F:RocketLib.Menus.Layout.SizeMode.Fill">
            <summary>
            Element takes all remaining space after other children are sized
            </summary>
        </member>
        <member name="F:RocketLib.Menus.Layout.SizeMode.Auto">
            <summary>
            Element automatically sizes to fit its content (only supported by some elements)
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.VerticalLayoutContainer">
            <summary>
            Container that stacks children vertically from top to bottom
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.GridLayoutContainer">
            <summary>
            Container that arranges children in a grid with specified rows and columns
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.AbsoluteLayoutContainer">
            <summary>
            Container that positions children at specific absolute positions
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.AbsoluteLayoutContainer.SetChildPosition(RocketLib.Menus.Elements.LayoutElement,UnityEngine.Vector2)">
            <summary>
            Sets the absolute position for a child element relative to container center
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.AbsoluteLayoutContainer.SetChildPosition(RocketLib.Menus.Elements.LayoutElement,System.Single,System.Single)">
            <summary>
            Sets the absolute position for a child element
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.HorizontalLayoutContainer">
            <summary>
            Container that arranges children horizontally from left to right
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Layout.PaginatedGridContainer">
            <summary>
            Container that manages multiple grid pages with navigation and smooth transitions
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.SetParentMenu(RocketLib.Menus.Core.FlexMenu)">
            <summary>
            Set the parent menu for navigation refresh
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.SetItems(System.Collections.Generic.List{RocketLib.Menus.Elements.LayoutElement})">
            <summary>
            Set all items to be paginated
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.NextPage">
            <summary>
            Navigate to the next page
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.PreviousPage">
            <summary>
            Navigate to the previous page
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.GoToPage(System.Int32)">
            <summary>
            Jump to a specific page without animation
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.SetNavigationButtons(RocketLib.Menus.Elements.ActionButton,RocketLib.Menus.Elements.ActionButton)">
            <summary>
            Initialize navigation buttons (called from menu using this container)
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.GetFocusedElement">
            <summary>
            Get the currently focused element across all pages
            </summary>
        </member>
        <member name="M:RocketLib.Menus.Layout.PaginatedGridContainer.FocusFirstElement">
            <summary>
            Focus the first focusable element on the current page
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Elements.LayoutElement.IsVisible">
            <summary>
            This determines whether the element and its children are visible on screen.
            </summary>
        </member>
        <member name="P:RocketLib.Menus.Elements.LayoutElement.IsPositioned">
            <summary>
            This determines whether the element and its children should take up space and be positioned by Layout Containers
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Elements.ImageElement">
            <summary>
            A LayoutElement that displays game textures using Broforce's SpriteSM system
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Elements.ShapeElement">
            <summary>
            A LayoutElement that displays basic runtime-created shapes
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Elements.SpacerElement">
            <summary>
            A lightweight invisible element used for spacing in layouts
            </summary>
        </member>
        <member name="T:RocketLib.Menus.Elements.BroCard">
            <summary>
            UI element for displaying a bro in card format for grid view selection
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture0">
            <summary>
            Military Salute
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture1">
            <summary>
            Waving
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture2">
            <summary>
            Point Direction
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture3">
            <summary>
            Thrust
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture4">
            <summary>
            Knee Drop
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture5">
            <summary>
            Shhh
            </summary>
        </member>
        <member name="F:RocketLib.UMM.ModSave.gesture6">
            <summary>
            Sing (Unused)
            </summary>
        </member>
        <member name="T:DictionarySerializationExtensions">
            <summary>
            Extension methods for easy dictionary serialization with Unity Mod Manager's XML settings
            </summary>
        </member>
        <member name="M:DictionarySerializationExtensions.ToSerializableArray``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts a dictionary to an array of SerializableKeyValuePair for XML serialization
            </summary>
        </member>
        <member name="M:DictionarySerializationExtensions.ToDictionary``2(RocketLib.SerializableKeyValuePair{``0,``1}[])">
            <summary>
            Converts an array of SerializableKeyValuePair back to a dictionary
            </summary>
        </member>
        <member name="M:DictionarySerializationExtensions.ToSerializableArray``3(System.Collections.Generic.Dictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2})">
            <summary>
            Converts a dictionary to an array using a custom converter function
            </summary>
        </member>
        <member name="M:DictionarySerializationExtensions.ToDictionary``3(``2[],System.Func{``2,``0},System.Func{``2,``1})">
            <summary>
            Converts an array back to a dictionary using custom converter functions
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random element from collection
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.RandomIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns random index from collection
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Collection null or empty
            </summary>
        </member>
        <member name="M:IEnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Is Collection NOT null or empty
            </summary>
        </member>
        <member name="M:ObjectExtensions.Is``1(System.Object)">
            <summary>
            Check if this is a particular type.
            </summary>
        </member>
        <member name="M:ObjectExtensions.As``1(System.Object)">
            <summary>
            Cast to a different type, exception-safe.
            </summary>
        </member>
        <member name="M:ObjectExtensions.InvokeBaseMethod(System.Object,System.Type,System.String)">
            <summary>
            Not great
            </summary>
            <param name="obj"></param>
            <param name="baseType"></param>
            <param name="methodName"></param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ObjectExtensions.InvokeBaseMethod``1(System.Object,System.Type,System.String)">
            <summary>
            Not great
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="baseType"></param>
            <param name="methodName"></param>
            <returns></returns>
            <exception cref="T:System.MissingMethodException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ObjectExtensions.PrintDifferences``1(``0,``0)">
            <summary>
            Compares two objects and prints all differences to the log.
            </summary>
            <typeparam name="T">The type of objects being compared</typeparam>
            <param name="obj1">The first object to compare</param>
            <param name="obj2">The second object to compare</param>
        </member>
        <member name="M:ObjectExtensions.GenerateMatchingCode``1(``0,``0)">
            <summary>
            Compares two objects and generates code to make obj1 match obj2.
            The generated code uses 'this.' and is meant to be placed inside the class.
            </summary>
            <typeparam name="T">The type of objects being compared</typeparam>
            <param name="obj1">The target objec</param>
            <param name="obj2">The source object (values to copy from)t</param>
        </member>
        <member name="M:HarmonyExtensions.GetFieldValue``1(System.Object,System.String)">
            <summary>
            Get the value of a field as <typeparamref name="T"/>
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Field(string).GetValue&lt;T&gt;()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetFieldValue(System.Object,System.String)">
            <summary>
            Get the value of a field
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Field(string).GetValue()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Set the value of the field <paramref name="fieldName"/> with <paramref name="value"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HarmonyExtensions.SetFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Set the value of the field <paramref name="fieldName"/> with <paramref name="value"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:HarmonyExtensions.CallMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Call a method then return value as <typeparamref name="T"/>
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Method(string, object[]).GetValue&lt;T&gt;()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Call a method then return value
            </summary>
            <seealso cref="!:HarmonyLib.Traverse.Method(string, object[]).GetValue()"/>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetBool(System.Object,System.String)">
            <summary>
            Get bool field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;bool&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetFloat(System.Object,System.String)">
            <summary>
            Get float field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;float&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.GetInt(System.Object,System.String)">
            <summary>
            Get int field value
            </summary>
            <seealso cref="!:GetFieldValue&lt;float&gt;(object, string)"/>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.DynamicFieldsValueSetter(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[],System.Action{HarmonyLib.Traverse,System.String,System.Object})">
            <summary>
            Set multiple fields on an object from a <see cref="!:Dictionary&lt;string, object&gt;"/>
            Can navigate through instances from fields using the separator <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> in the <see cref="!:Dictionary&lt;string, object&gt;"/> key.
            <seealso cref="M:HarmonyExtensions.FindFieldWithPath(System.Object,System.String)"/>
            </summary>
            <param name="obj"></param>
            <param name="map">Key: Field Name | Value: the value to give to the field</param>
            <param name="skipTheseFields">Fields to ignore</param>
            <param name="setter">Custom action to set fields</param>
        </member>
        <member name="M:HarmonyExtensions.FindFieldWithPath(System.Object,System.String)">
            <summary>
            Use <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> to navigate through the objects.
            </summary>
            <example>
            We have 2 classes
            <code>
            class A
            {
                B b;
            }
            class B
            {
                int number = 8;
            }
            </code>
            If we want to get 'B.Number' from A, <paramref name="fieldPath"/> should be 'b.number'
            </example>
            <param name="obj"></param>
            <param name="fieldPath"></param>
            <returns></returns>
        </member>
        <member name="M:HarmonyExtensions.FindFieldWithPath(HarmonyLib.Traverse,System.String)">
            <summary>
            Use <see cref="F:HarmonyExtensions.PATH_SEPARATOR"/> to navigate through the objects.
            </summary>
            <example>
            We have 2 classes
            <code>
            class A
            {
                B b;
            }
            class B
            {
                int number = 8;
            }
            </code>
            If we want to get 'B.Number' from A, <paramref name="fieldPath"/> should be 'b.number'
            </example>
            <param name="traverse"></param>
            <param name="fieldPath"></param>
            <returns></returns>
        </member>
        <member name="T:RLogType">
            <summary>
            Type of log for the log. They each have a "custom" color.
            </summary>
        </member>
        <member name="F:RLogType.Log">
            <summary>
            White
            </summary>
        </member>
        <member name="F:RLogType.Warning">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:RLogType.Error">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Exception">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Information">
            <summary>
            Blue
            </summary>
        </member>
    </members>
</doc>
