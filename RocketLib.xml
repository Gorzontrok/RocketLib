<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RocketLib</name>
    </assembly>
    <members>
        <member name="T:RocketLib0.BroforceMod">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:RocketLib0.BroforceMod.ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="F:RocketLib0.BroforceMod.__mod">
            <summary>
            The Unity mod of the class.
            </summary>
        </member>
        <member name="F:RocketLib0.BroforceMod.__ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="P:RocketLib0.BroforceMod.Loaded">
            <summary>
            Is the mod is successful load.
            </summary>
        </member>
        <member name="P:RocketLib0.BroforceMod.logger">
            <summary>
            Here you access Logger method.
            </summary>
        </member>
        <member name="F:RocketLib0.BroforceMod.OnExitGame">
            <summary>
            Call when exiting game.
            </summary>
        </member>
        <member name="F:RocketLib0.BroforceMod.OnLevelFinished">
            <summary>
            Call when a level is finished.
            </summary>
        </member>
        <member name="F:RocketLib0.BroforceMod.OnAfterLoadMods">
            <summary>
            Call when all mod are loaded.
            </summary>
        </member>
        <member name="M:RocketLib0.BroforceMod.#ctor">
            <summary>
            Create the mod.
            </summary>
        </member>
        <member name="M:RocketLib0.BroforceMod.#ctor(UnityModManagerNet.UnityModManager.ModEntry)">
            <summary>
            Create the mod.
            </summary>
            <param name="mod"></param>
        </member>
        <member name="M:RocketLib0.BroforceMod.Load(UnityModManagerNet.UnityModManager.ModEntry)">
            <summary>
            Function to call for loading the mod.
            </summary>
            <param name="mod">UnityModManager mod</param>
        </member>
        <member name="M:RocketLib0.BroforceMod.OnUpdate">
            <summary>
            The Update function. Call it in Main.OnUpdate.
            </summary>
        </member>
        <member name="M:RocketLib0.BroforceMod.Log(System.Object,RLogType,System.Boolean)">
            <summary>
            Faster method to write log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="T:RocketLib0.GamePassword">
            <summary>
            Add password to the game
            </summary>
        </member>
        <member name="F:RocketLib0.GamePassword.password">
             <summary>
            
             </summary>
        </member>
        <member name="F:RocketLib0.GamePassword.action">
             <summary>
            
             </summary>
        </member>
        <member name="M:RocketLib0.GamePassword.#ctor(System.String,System.Action)">
            <summary>
            Create the game password.
            </summary>
            <param name="_password"></param>
            <param name="_action"></param>
        </member>
        <member name="M:RocketLib0.GamePassword.ToString">
            <summary>
            ToString method
            </summary>
            <returns></returns>
        </member>
        <member name="T:RocketLib0.GamePasswordController">
             <summary>
            
             </summary>
        </member>
        <member name="P:RocketLib0.GamePasswordController.GamePasswords">
             <summary>
            
             </summary>
        </member>
        <member name="T:RocketLib0.IsThisMod">
            <summary>This constructor check if a mod is Here or is Enabled.
            <example>
            Example of call :
            <code>
                var RocketLib_info = new IsThisModIs("RocketLib");
            </code>
            </example>
            </summary>
        </member>
        <member name="P:RocketLib0.IsThisMod.IsHere">
            <summary>
            Return if the mod is Here.
            </summary>
        </member>
        <member name="P:RocketLib0.IsThisMod.IsEnabled">
            <summary>
            Return is the mod is Enabled, if the mod does not exist it will return false.
            </summary>
        </member>
        <member name="F:RocketLib0.IsThisMod.ID">
            <summary>
            The ID of the given mod.
            </summary>
        </member>
        <member name="M:RocketLib0.IsThisMod.#ctor(System.String)">
            <summary>This constructor check if a mod is Here or is Enabled. Actually it don't work.
            <example>
            Example of call :
            <code>
                RocketLib.IsThisModIs RocketLib_info = new RocketLib.IsThisModIs("RocketLib");
            </code>
            </example>
            </summary>
            <param name="ID">Id of the mod.</param>
        </member>
        <member name="M:RocketLib0.IsThisMod.HasHarmonyPrefixPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has prefix patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib0.IsThisMod.HasHarmonyPostfixPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Postfix patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib0.IsThisMod.HasHarmonyTranspilerPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Transpiler patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib0.IsThisMod.HasHarmonyFinalizerPatch(System.Reflection.MethodInfo)">
            <summary>
            Check if the mod has Finalizer patch of a given method.
            </summary>
            <param name="MethodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:RocketLib0.Logger">
             <summary>
            
             </summary>
        </member>
        <member name="F:RocketLib0.Logger.ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.Loaded">
            <summary>
            Is the mod is successful load.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.HasStartLog">
             <summary>
            
             </summary>
        </member>
        <member name="F:RocketLib0.Logger.TimeNow">
            <summary>
            the current time.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.UseDebugLog">
            <summary>
            Show debug log.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.UseLocalLog">
            <summary>
            Write log locally.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.LogFilePath">
            <summary>
            Path of the file with the mod log.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.Prefix">
            <summary>
            Normal prefix.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.PrefixException">
            <summary>
            Exception prefix.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.PrefixInformation">
            <summary>
            Information prefix.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.PrefixWarning">
            <summary>
            Warning prefix.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.PrefixError">
            <summary>
            Error Prefix.
            </summary>
        </member>
        <member name="F:RocketLib0.Logger.PrefixDebug">
            <summary>
            Debug prefix.
            </summary>
        </member>
        <member name="M:RocketLib0.Logger.#ctor(UnityModManagerNet.UnityModManager.ModEntry)">
             <summary>
            
             </summary>
             <param name="mod"></param>
        </member>
        <member name="M:RocketLib0.Logger.OnUpdate">
            <summary>
            The Update function. Call it in Main.OnUpdate.
            </summary>
        </member>
        <member name="M:RocketLib0.Logger.StartLog">
             <summary>
            
             </summary>
        </member>
        <member name="M:RocketLib0.Logger.Log(System.Collections.Generic.IEnumerable{System.Object},RLogType,System.Boolean)">
            <summary>
            Write Log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.Log(System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.Log(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.Log(System.Object,RLogType,System.Boolean)">
            <summary>
            Write log.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ExceptionLog(System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ExceptionLog(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ExceptionLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ExceptionLog(System.Object,System.Boolean)">
            <summary>
            Write Exception Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.WarningLog(System.Object,System.Boolean)">
            <summary>
            Write Warning Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.WarningLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Warning Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.InformationLog(System.Object,System.Boolean)">
            <summary>
            Write information Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.InformationLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write information Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ErrorLog(System.Object,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ErrorLog(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ErrorLog(System.Exception,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.ErrorLog(System.String,System.Exception,System.Boolean)">
            <summary>
            Write Error Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="Debug"></param>
        </member>
        <member name="M:RocketLib0.Logger.DebugLog(System.Object,RLogType)">
            <summary>
            Write log only in debug mode.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib0.Logger.DebugLog(System.Collections.Generic.IEnumerable{System.Object},RLogType)">
            <summary>
            Write log only in debug mode.
            </summary>
            <param name="Message"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib0.Logger.DebugLog(System.Exception,RLogType)">
            <summary>
            Write Exception Debug Log.
            </summary>
            <param name="exception"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib0.Logger.DebugLog(System.String,System.Exception,RLogType)">
            <summary>
            Write Exception Debug Log.
            </summary>
            <param name="Message"></param>
            <param name="exception"></param>
            <param name="LogType"></param>
        </member>
        <member name="M:RocketLib0.Logger.WriteLogLocally(System.String,System.String)">
            <summary>
            Write log in the current mod folder.
            </summary>
            <param name="Message">Message to write in the log.</param>
            <param name="prefix">The prefix</param>
        </member>
        <member name="M:RocketLib0.Logger.ClearFileLog">
            <summary>
            Delete all lines in the log file.
            </summary>
        </member>
        <member name="T:RocketLib0.RocketLib">
            <summary>
            Library of useful function made for Broforce. And an  Logger on screen.
            </summary>
        </member>
        <member name="T:RocketLib0.RocketLib._HeroUnlockController">
             <summary>
            
             </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.HeroTypes_Intervals">
            <summary>
            It's the HeroType  list of the Broforce bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Expendabros_HeroTypes_Intervals">
            <summary>
            It's the HeroType List of the Expendabros bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Other_Bros_HeroTypes">
            <summary>
            It's the HeroType List of the Expendabros bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Full_HeroType">
            <summary>
            It's the full HeroType list of the Broforce bros. Include Expendabros and Brondle Fly. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Hero_Unlock_Intervals">
            <summary>
            The list of unlock intervals of the bros. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Original_Unlock_Intervals">
            <summary>
            The original dictionary of the unlock intervals. (read only)
            </summary>
        </member>
        <member name="M:RocketLib0.RocketLib._HeroUnlockController.SetHeroUnlockIntervals(System.Collections.Generic.Dictionary{System.Int32,HeroType})">
            <summary>
            Set the Intervals for unlock bros.
            </summary>
            <param name="newHeroUnlockIntervals">The new interval dictionary.</param>
        </member>
        <member name="M:RocketLib0.RocketLib._HeroUnlockController.ShowHeroUnlockIntervals">
            <summary>
            Show Current Unlock order
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib._HeroUnlockController.Pocketed_Special_AmmoTypes">
            <summary>
            List of all PockettedSpecialAmmoType. (read only)
            </summary>
        </member>
        <member name="P:RocketLib0.RocketLib.Loaded">
            <summary>
            Know if RocketLib is Loaded
            </summary>
        </member>
        <member name="M:RocketLib0.RocketLib.CreateTexFromMat(System.String,UnityEngine.Material)">
            <summary>
            Create a Texture from a material. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image path</param>
            <param name="material">Original Material</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.CreateTexFromSpriteSM(System.String,SpriteSM)">
            <summary>
            Create a Texture from SpriteSM. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath">Image Path</param>
            <param name="sprite">Original Sprite</param>
            <returns>A Texture</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.CreateTexFromMeshRenderer(System.String,UnityEngine.MeshRenderer)">
            <summary>
            Create a Texture from a MeshRenderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="meshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib0.RocketLib.CreateTexFromRenderer(System.String,UnityEngine.Renderer)">
            <summary>
            Create a Texture from a Renderer. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="Renderer"></param>
            <returns></returns>
        </member>
        <member name="M:RocketLib0.RocketLib.CreateTexFromTexture(System.String,UnityEngine.Texture)">
            <summary>
            Create a Texture from an existing one. If the given path does not exist, it will return the given Texture.
            </summary>
            <param name="ImagePath"></param>
            <param name="texture--"></param>
            <returns></returns>
        </member>
        <member name="T:RocketLib0.RocketLib.RGUI">
            <summary>
            This class contains my GUILayout.
            </summary>
        </member>
        <member name="M:RocketLib0.RocketLib.RGUI.ArrowList(System.String[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="Number">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.RGUI.ArrowList(System.String[],System.Int32,System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="StringsArray">The values that are show.</param>
            <param name="Number">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.RGUI.ArrowList(System.Object[],System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="Number">The current index.</param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.RGUI.ArrowList(System.Object[],System.Int32,System.Int32)">
            <summary>
            A custom GUILayout. You make a choice with arrow.
            </summary>
            <param name="ObjectsArray">The values that are show.</param>
            <param name="Number">The current index.</param>
            <param name="Width"></param>
            <returns>Index of the array</returns>
        </member>
        <member name="M:RocketLib0.RocketLib.RGUI.Tab(System.String[],System.Int32,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="Strings"></param>
             <param name="Number"></param>
             <param name="Space"></param>
             <param name="TabWidth"></param>
             <returns></returns>
        </member>
        <member name="T:RocketLib0.ScreenLogger">
            <summary>
            On screen logger.
            </summary>
        </member>
        <member name="P:RocketLib0.ScreenLogger.Instance">
            <summary>
            Instance of ScreenLogger
            </summary>
        </member>
        <member name="P:RocketLib0.ScreenLogger.IsLoaded">
             <summary>
            
             </summary>
        </member>
        <member name="M:RocketLib0.ScreenLogger.Clear">
            <summary>
            Clear the log on screen.
            </summary>
        </member>
        <member name="M:RocketLib0.ScreenLogger.Log(System.Object,RLogType)">
            <summary>
            Add log to the screen.
            </summary>
            <param name="str">Log Message</param>
            <param name="type">RLogType</param>
        </member>
        <member name="M:RocketLib0.ScreenLogger.Log(System.Object,System.String)">
            <summary>
            Add log to the screen. (BroforceMod edition)
            </summary>
            <param name="str">Log Message</param>
            <param name="prefix">Prefix of the log</param>
        </member>
        <member name="T:RLogType">
            <summary>
            Type of log for the log. They each have a "custom" color.
            </summary>
        </member>
        <member name="F:RLogType.Log">
            <summary>
            White
            </summary>
        </member>
        <member name="F:RLogType.Warning">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:RLogType.Error">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Exception">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:RLogType.Information">
            <summary>
            Blue
            </summary>
        </member>
        <member name="T:RocketLibLoadMod.Main">
            <summary>
            You don't need it. Anyway you will just have the function of the UnityModManager.
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Main.mod">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Main.enabled">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Main.settings">
            <summary>
            </summary>
        </member>
        <member name="T:RocketLibLoadMod.Settings">
            <summary>
            Really, you don't need it. Anyway you will just have the function of the UnityModManager.
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Settings.OnScreenLog">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Settings.ShowScreenLogOption">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Settings.ShowManagerLog">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Settings.HaveItFirstLaunch">
            <summary>
            </summary>
        </member>
        <member name="F:RocketLibLoadMod.Settings.logTimer">
            <summary>
            </summary>
        </member>
        <member name="M:RocketLibLoadMod.Settings.Save(UnityModManagerNet.UnityModManager.ModEntry)">
            <summary>
            </summary>
            <param name="modEntry"></param>
        </member>
    </members>
</doc>
